@page "/courses"
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq

@attribute [StreamRendering]
@* @attribute [Authorize] *@
@rendermode InteractiveServer
@inject NavigationManager NavigationManager

<PageTitle>Courses</PageTitle>

<section class="section courses-section">
    <div class="content">
        <div class="heading-wrapper">
            <h1 class="h1">Courses</h1>
            <div class="input-wrapper">

                <select id="select" class="input">
                    <option value="all">All categories</option>
@*                     @if (Model.CoursesSection.Categories != null)
                    {
                        @foreach (var category in Model.CoursesSection.Categories)
                        {
                            <option value="@category.CategoryName">@category.CategoryName</option>
                        }
                    } *@
                </select>
                <div class="search-wrapper">
                    <input id="searchQuery" name="searchQuery" type="text" class="input" placeholder="Search courses" />
                    <i class="fa-regular fa-magnifying-glass"></i>
                </div>
            </div>
        </div>
        <div class="card-wrapper course-card-wrapper">
            @if (courses == null)
            {
                <p>@LoadingMessage</p>
            }
            else
            {
                @foreach (var course in courses)
                {
                    @* bool isCourseSaved = savedCourses.Contains(course.Id); *@
                    <article class="card shadow-s" @onclick="() => NavigateToCoursePage(course.Id)" style="cursor: pointer;">
   
                        <div class="top-wrapper">
                            <img src="/images/@course.ImageUri" alt="" class="img" />
                            @if (course.IsBestSeller)
                            {
                                <span class="card-badge text-s">Best Seller</span>
                            }
                            @*                             
                            @if (isCourseSaved)
                            {
                                <a asp-action="RemoveCourse" asp-controller="Courses" asp-route-courseId="@course.Id" class="card-save"><i class="fa-solid fa-bookmark"></i></a>
                                }
                                else
                                {
                                <a asp-action="JoinCourse" asp-controller="Courses" asp-route-courseId="@course.Id" class="card-save"><i class="fa-regular fa-bookmark"></i></a>
                            } *@
                            <a asp-action="JoinCourse" asp-controller="Courses" asp-route-courseId="@course.Id" class="card-save"><i class="fa-regular fa-bookmark"></i></a>
                        </div>
                        <div class="bottom-wrapper">
                            <div class="text-wrapper">
                                <h5 class="h5">@course.Title</h5>
                                <p class="text-s">@course.Authors[0].Name</p>
                                @if (course.Prices.Discount.HasValue)
                                {
                                    <div class="price-wrapper">
                                        <p class="h6 discount">$@course.Prices.Discount </p>
                                        <p class="h6 ord">$@course.Prices.Price</p>
                                        <br />
                                    </div>
                                }
                                else
                                {
                                    <p class="h6">$@course.Prices.Price</p>
                                }
                            </div>
                            <div class="meta-wrapper">
                                <p class="text-s"><i class="fa-light fa-clock"></i> @course.Hours hours</p>
                                <p class="text-s"><i class="fa-light fa-thumbs-up"></i> @course.LikesInPercent % (@course.Likes K)</p>
                            </div>
                        </div>
                    </article>
                }
            }
        </div>

    </div>
</section>

@code {
    private CourseModel[]? courses;
    private string LoadingMessage = "Loading...";

    protected override async Task OnInitializedAsync()
    {
        try
        {

            GraphQLQuery query = new GraphQLQuery { Query = "{ getCourses{ id title isBestSeller authors{ name } categories prices{ price currency discount } hours likesInPercent likes }}"};

            // HttpResponseMessage response = await Http.PostAsJsonAsync(Environment.GetEnvironmentVariable("COURSES_URI"), query);
            HttpResponseMessage response = await Http.PostAsJsonAsync("https://courseprovider-ahl.azurewebsites.net/api/graphql?code=SbqqnG8cDNM1JmgFy6aoiPnhfuQRs1AEWtbZAdVZG61gAzFuFig6RA%3D%3D", query);
            string jsonString = await response.Content.ReadAsStringAsync();
            if (response.IsSuccessStatusCode)
            {
                var jsonData = JObject.Parse(jsonString);
                var coursesJson = jsonData["data"]?["getCourses"]?.ToString();

                if (coursesJson != null)
                {
                    courses = JsonConvert.DeserializeObject<CourseModel[]>(coursesJson);
                }
                
            }
        } 
        catch (Exception)
        {
            LoadingMessage = "No courses found";
        }
    }

    private void NavigateToCoursePage(string courseId)
    {
        NavigationManager.NavigateTo($"/singlecourse?id={courseId}");
    }
}

