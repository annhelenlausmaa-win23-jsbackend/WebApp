@page "/account/details"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using WebApp.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager

@attribute [StreamRendering]


<PageTitle>Details</PageTitle>
@if (user == null)
{ 
    <p>Loading... </p>
}
else
{
    <h1 class="h1 desktop-heading">Account Details</h1>
    <EditForm class="basic-info-form" Model="DetailsInput" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post" novalidate>
        <DataAnnotationsValidator/>
        <h5 class="h5 colored-subheading">Basic Info</h5>
        <div class="input-pair-wrapper">
            <div class="input-wrapper">
                <div class="input-top-wrapper">
                    <label class="h6 label" for="firstname">First name</label>
                    <ValidationMessage For="() => DetailsInput.FirstName" class="text-s span" />
                </div>
                <InputText @bind-Value="DetailsInput.FirstName" class="input" autocomplete="givenname" aria-required="true" placeholder="" />
            </div>
            <div class="input-wrapper">
                <div class="input-top-wrapper">
                    <label class="h6 label" for="lastname">Last name</label>
                    <ValidationMessage For="() => DetailsInput.LastName" class="text-s span" />
                </div>
                <InputText @bind-Value="DetailsInput.LastName" class="input" autocomplete="surname" aria-required="true" placeholder="" />
            </div>
        </div>
        <div class="input-pair-wrapper">
            <div class="input-wrapper">
                <div class="input-top-wrapper">
                    <label class="h6 label" for="email">Email</label>
                    <ValidationMessage For="() => DetailsInput.Email" class="text-s span" />
                </div>
                <InputText @bind-Value="DetailsInput.Email" class="input" autocomplete="email" aria-required="true" placeholder="" />
            </div>
            <div class="input-wrapper">
                <div class="input-top-wrapper">
                    <label class="h6 label" for="DetailsInput.PhoneNumber">Phone number</label>
                </div>
                <InputText @bind-Value="DetailsInput.PhoneNumber" class="input" autocomplete="phonenumber" aria-required="true" placeholder="" />
            </div>
        </div>
        <div class="input-wrapper">
            <div class="input-top-wrapper">
                <label class="h6 label" for="DetailsInput.Biography">Biography</label>
            </div>
            <InputTextArea @bind-Value="DetailsInput.Biography" class="input" autocomplete="biograpfy" aria-required="true" placeholder="" />
        </div>

        <div class="button-wrapper">
            <button type="reset" class="btn-gray button">Cancel</button>
            <button type="submit" class="btn-theme button">Save changes</button>
        </div>
    </EditForm>

    @* 
    <form class="address-form" method="post" asp-controller="Account" asp-action="Details" novalidate>
        <h5 class="h5 colored-subheading">Address</h5>
        <div class="input-wrapper">
            <div class="input-top-wrapper">
                <label class="h6 label" asp-for="AddressInfoForm.AddressLine1"></label>
                <span class="text-s span" asp-validation-for="AddressInfoForm.AddressLine1"></span>
            </div>
            <input class="input" asp-for="AddressInfoForm.AddressLine1" />
        </div>
        <div class="input-wrapper">
            <div class="input-top-wrapper">
                <label class="h6 label" asp-for="AddressInfoForm.AddressLine2"></label>
                <span class="text-s span" asp-validation-for="AddressInfoForm.AddressLine2"></span>
            </div>
            <input class="input" asp-for="AddressInfoForm.AddressLine2" />
        </div>
        <div class="input-pair-wrapper">
            <div class="input-wrapper">
                <div class="input-top-wrapper">
                    <label class="h6 label" asp-for="AddressInfoForm.PostalCode"></label>
                    <span class="text-s span" asp-validation-for="AddressInfoForm.PostalCode"></span>
                </div>
                <input class="input" asp-for="AddressInfoForm.PostalCode" />
            </div>
            <div class="input-wrapper">
                <div class="input-top-wrapper">
                    <label class="h6 label" asp-for="AddressInfoForm.City"></label>
                    <span class="text-s span" asp-validation-for="AddressInfoForm.City"></span>
                </div>
                <input class="input" asp-for="AddressInfoForm.City" />
            </div>
        </div>
        <div class="button-wrapper">
            <button type="reset" class="btn-gray button">Cancel</button>
            <button type="submit" class="btn-theme button">Save changes</button>
        </div>
    </form> 
    *@
}
@code {
    private ApplicationUser user = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private DetailsInputModel DetailsInput { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await PopulateInfoAsync();
    }

    private async Task PopulateInfoAsync()
    {
        user = await UserManager.GetUserAsync(HttpContext.User) ?? null!;
        if(user != null)
        {
            DetailsInput.FirstName = user.FirstName ?? "";
            DetailsInput.LastName = user.LastName ?? "";
            DetailsInput.Email = user.Email!;
            DetailsInput.PhoneNumber = user.PhoneNumber;
            DetailsInput.Biography = user.Biography;   
        }
    }

    private async Task OnValidSubmitAsync()
    {
        if(user != null)
        {
            ApplicationUser userToUpdate = await UserManager.FindByIdAsync(user.Id);
            var test = DetailsInput;
            if (userToUpdate != null)
            {
                userToUpdate.FirstName = DetailsInput.FirstName;
                userToUpdate.LastName = DetailsInput.LastName;
                userToUpdate.Email = DetailsInput.Email;
                userToUpdate.PhoneNumber = DetailsInput.PhoneNumber;
                userToUpdate.Biography = DetailsInput.Biography;

                IdentityResult? result = await UserManager.UpdateAsync(userToUpdate);
                if (result.Succeeded)
                {
                    NavigationManager.NavigateTo("/");
                }
            } 

            await SignInManager.RefreshSignInAsync(user);
        }
    }

    private sealed class DetailsInputModel
    {
        [Display(Name = "First name")]
        [Required(ErrorMessage = "You must enter a first name")]
        [MinLength(2, ErrorMessage = "Invalid first name format")]
        [DataType(DataType.Text)]
        public string FirstName { get; set; } = null!;

        [Display(Name = "Last name")]
        [Required(ErrorMessage = "You must enter a last name")]
        [MinLength(2, ErrorMessage = "Invalid last name format")]
        [DataType(DataType.Text)]
        public string LastName { get; set; } = null!;

        [Display(Name = "E-mail")]
        [Required(ErrorMessage = "You must enter an e-mail")]
        [RegularExpression("^[^\\s@]+@[^\\s@]+\\.[^\\s@]{2,}$", ErrorMessage = "Invalid e-mail format")]
        [DataType(DataType.EmailAddress)]
        public string Email { get; set; } = null!;

        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }

        [Display(Name = "Biography")]
        [DataType(DataType.Text)]
        public string? Biography { get; set; }
    }
}
